from abc import ABC, abstractmethod
from scanner.vulnerabilities.severity_score import SeverityScore

class VulnerabilityInterface(ABC):
    
    # Reader friendly name of the vulnerability in a few words ex. "Password Too Old"
    @abstractmethod
    def get_vulnerability_name(self) -> str:
        raise NotImplementedError

    # Generic description of the vulnerability not tied to any specific scan ex. "Rarely updated passwords are dangerous because (...)"
    @abstractmethod
    def get_vulnerability_description(self) -> str:
        raise NotImplementedError
    
    # True if the vulnerability detected, False if not
    @abstractmethod
    def check(self, *args, **kwargs) -> bool:
        raise NotImplementedError
    
    # Description of the actual scan ex. "this password was updated 5 years ago."
    @abstractmethod
    def get_description_of_the_detected_vulnerability(self) -> str:
        raise NotImplementedError
    
    # 0-10 range
    @abstractmethod
    def get_severity_score(self) -> int:
        raise NotImplementedError

    def get_severity_score_as_severity_score_object(self) -> SeverityScore:
        return SeverityScore(
            self.get_severity_score()
        )
        